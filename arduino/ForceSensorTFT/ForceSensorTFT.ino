/*
  #
  #  This file is part of ChronoJump
  #
  #  ChronoJump is free software; you can redistribute it and/or modify
  #   it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation; either version 2 of the License, or
  #     (at your option) any later version.
  #
  #  ChronoJump is distributed in the hope that it will be useful,
  #   but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #     GNU General Public License for more details.
  #
  #  You should have received a copy of the GNU General Public License
  #   along with this program; if not, write to the Free Software
  #    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  #
  #   Copyright (C) 2017     Xavier Padull√©s <x.padulles@gmail.com>
  #   Copyright (C) 2017     Xavier de Blas <xaviblas@gmail.com>


*/

#include <HX711.h>
#include <EEPROM.h>
#include <LiquidCrystal.h>
#include <MsTimer2.h>
#include "SPI.h"
//#include "ILI9341_t3.h"
#include "Adafruit_ILI9341.h"
#include "Adafruit_GFX.h"
//#include "font_Arial.h"
#include "HX711.h"
#include <Bounce.h>
#include <Encoder.h>
#include <SD.h>

#define DOUT  2
#define CLK  3

//Version number //it always need to start with: "Force_Sensor-"
//Device commented for memory optimization
//String device = "Force_Sensor";
String version = "0.7";


int tareAddress = 0;
int calibrationAddress = 4;

HX711 scale(DOUT, CLK);

//Data comming from the cell after resting the offset weight
float offsetted_data = 0;

//Data resulting of appying the calibration_factor to the offsetted_data
float scaled_data = 0;

////The weight used to calibrate the cell
//float weight = 0.0;

//Wether the sensor has to capture or not
boolean capturing = false;

////Wether the sync time must be sent or not
//bool sendSyncTime = false;

//wether the tranmission is in binary format or not
boolean binaryFormat = false;

unsigned long lastTime = 0;

//RFD variables
float RFD200 = 0.0;   //average RFD during 200 ms
float RFD100 = 0.0;  //average RFD during 100 ms
float maxRFD200 = 0.0;   //Maximim average RFD during 200 ms
float maxRFD100 = 0.0;  //Maximim average RFD during 100 ms
bool elapsed200 = false;  //Wether it has passed 200 ms since the start
bool elapsed100 = false;  //Wether it has passed 100 ms since the start


unsigned long rcaTime = 0;  //Time at which RCA changed
unsigned long elapsedTime = 0;  //Elapsed time between 2 consecutives measures. No overflow manage
elapsedMicros totalTime = 0;

/* Not used in order to optimize memory
  //Used to sync 2 evices
  unsigned long syncTime = 0;
  unsigned int samples = 0;
*/

const unsigned short redButtonPin = 4;
bool redButtonState;

const unsigned short blueButtonPin = 5;
bool blueButtonState;

//TODO. Manage it with timer interruptions
unsigned short lcdDelay = 25; //to be able to see the screen. Seconds are also printed in delay but 25 values are less than one second
unsigned short lcdCount = 0;
float measuredLcdDelayMax = 0; //The max in the lcdDelay periodca
float measuredMax = 20; // The max since starting capture
float measuredMin = -20;
float measured = scale.get_units();

/***** Atention!!! *****
    lcd.createChar() function makes a mess with the cursor position and it must be specified
    again the cursos with lcd.setCursor()
*/
//-> Start of non starndard charachters
byte downArrow[] = {
  B00000,
  B00000,
  B00000,
  B10000,
  B01001,
  B00101,
  B00011,
  B01111
};

byte upArrow[] = {
  B01111,
  B00011,
  B00101,
  B01001,
  B10000,
  B00000,
  B00000,
  B00000
};

byte exitChar[] = {
  B11111,
  B10001,
  B10101,
  B10101,
  B00100,
  B10101,
  B01110,
  B00100
};

byte recordChar[] = {
  B00000,
  B01110,
  B11111,
  B11111,
  B11111,
  B11111,
  B01110,
  B00000
};

byte battery0[] = {
  B01110,
  B11111,
  B10001,
  B10001,
  B10001,
  B10001,
  B10001,
  B11111
};

byte battery1[] = {
  B01110,
  B11111,
  B10001,
  B10001,
  B10001,
  B10001,
  B11111,
  B11111
};

byte battery2[] = {
  B01110,
  B11111,
  B10001,
  B10001,
  B10001,
  B11111,
  B11111,
  B11111
};

byte battery3[] = {
  B01110,
  B11111,
  B10001,
  B10001,
  B11111,
  B11111,
  B11111,
  B11111
};

byte battery4[] = {
  B01110,
  B11111,
  B10001,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111
};

byte battery5[] = {
  B01110,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111
};
//End of non standard characters <---

//Physical configuration of the LCD
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);

const unsigned short rcaPin = 3;

unsigned long triggerTime = 0;        //The instant in which the trigger signal is activated
bool rcaState = digitalRead(rcaPin);  //Wether the RCA is shorted or not
bool lastRcaState = rcaState;         //The previous state of the RCA

unsigned short menu = 0;              //Main menu state
unsigned short submenu = 0;           //submenus state

const String menuList [] = {
  "  Measure",
  "TareMeasure",
  "Steadiness",
  "  System"
};

//Mean force in 1s
//Circular buffer where all measures in 1s are stored
//ADC has 84.75 ~ 85 samples/second. If we need the diference in 1 second we need 1 more sample
//TODO: Adjust values to 160Hz
unsigned int freq = 86;
//Cirtular buffer of force measures
float forces1s[86];
//200 ms -> 16.95 ~ 17 samples. To know the elapsed time in 200 ms we need 1 more sample
unsigned short samples200ms = 18;
unsigned short samples100ms = 9;
//Circular buffer of times
unsigned long totalTimes1s[18];
//The current slot in the array
unsigned short currentFSlot = 0;
unsigned short currentTSlot = 0;
//Mean force during the last second
float meanForce1s;
//Maximum mean force exerted during 1 second. It could be at any moment durint the capture
float maxMeanForce1s = 0.0;

//Variability
float sumSSD = 0.0;
float sumMeasures = 0.0;
unsigned int samplesSSD = 0;
float RMSSD = 0.0;
float cvRMSSD = 0.0;
float lastMeasure = 0;
bool capturingPreSteadiness = false;
bool capturingSteadiness = false;

//Impulse. Impulse = Sumatory of the force*time
float impulse = 0;
bool elapsed1Sample = false;    //Wether there's a previous sample. Needed to calculate impulse

//Force in trigger
float forceTrigger = 0.0;       //Measured force at the moment the RCA is triggered

//If device is controled by computer don't show results on LCD
bool PCControlled = false;

long tareValue = 0;

// Display variables
const int chipSelect = 6;
#define TFT_DC      20
#define TFT_CS      21
#define TFT_RST    255  // 255 = unused, connect to 3.3V
#define TFT_MOSI     7
#define TFT_SCLK    14
#define TFT_MISO    12

//ILI9341_t3 tft = ILI9341_t3(TFT_CS, TFT_DC, TFT_RST, TFT_MOSI, TFT_SCLK, TFT_MISO);
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST, TFT_MISO);
// Display 16-bit color values:
#define BLUE      0x001F
#define TEAL      0x0438
#define GREEN     0x07E0
#define CYAN      0x07FF
#define RED       0xF800
#define MAGENTA   0xF81F
#define YELLOW    0xFFE0
#define ORANGE    0xFC00
#define PINK      0xF81F
#define PURPLE    0x8010
#define GREY      0xC618
#define WHITE     0xFFFF
#define BLACK     0x0000
#define CJCOLOR   0X1109

boolean display1 = true;
double ox , oy ;
double x, y;

const unsigned char logo [] PROGMEM = {

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0xff,
  0xff, 0xf8, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x06, 0xb0, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe1, 0x7f, 0xff, 0xff, 0x00, 0x01, 0xff, 0x80, 0x00, 0x3f,
  0xff, 0xe0, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe3, 0xff,
  0xff, 0xff, 0x80, 0x07, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xff, 0xc0, 0x7f, 0xc0, 0x0f, 0xff, 0x80, 0x0f, 0xff,
  0xff, 0xfc, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc1, 0xfe,
  0xff, 0xff, 0xc0, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xe0, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf1, 0xff,
  0xff, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x31, 0xff, 0x80, 0x3f, 0xc0, 0xff, 0xff, 0xd1, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x11, 0xfc,
  0x00, 0x7f, 0xe1, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x01, 0xfc, 0x00, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x03, 0xfe,
  0x01, 0xff, 0xe7, 0xff, 0xf8, 0x00, 0x07, 0xfc, 0x19, 0xff, 0xff, 0x3f, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x03, 0xfe, 0x03, 0xff, 0xc7, 0xff, 0xf0, 0x00, 0x07, 0xfc,
  0x01, 0xff, 0xfc, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x03, 0xfc,
  0x07, 0xff, 0xcf, 0xff, 0xc0, 0x40, 0x05, 0xfc, 0x00, 0x7f, 0xf0, 0x7f, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x07, 0xf8, 0x0f, 0xff, 0x9f, 0xff, 0x00, 0x60, 0x03, 0xfc,
  0x00, 0x7f, 0xc0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x07, 0xf8,
  0x1f, 0xff, 0x9f, 0xfe, 0x00, 0x60, 0x01, 0xfc, 0x00, 0xff, 0x80, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x07, 0xf0, 0x3f, 0xff, 0x3f, 0xfc, 0x00, 0xe0, 0x03, 0xfe,
  0x01, 0xff, 0x80, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x07, 0xf0,
  0xff, 0xfe, 0x3f, 0xfc, 0x00, 0xf0, 0x03, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x07, 0xe1, 0xff, 0xfc, 0x7f, 0xf8, 0x00, 0xf0, 0x07, 0xfc,
  0x03, 0xff, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xff, 0x00, 0x00, 0x0f, 0xe3,
  0xff, 0xf8, 0x7f, 0xf0, 0x01, 0xf0, 0x07, 0xfc, 0x07, 0xfe, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xef, 0xff, 0xf0, 0xff, 0xe0, 0x01, 0x70, 0x0f, 0xf8,
  0x0f, 0xfc, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xfc, 0x06, 0x00, 0x07, 0xcf,
  0xff, 0xc0, 0xff, 0xe0, 0x01, 0x70, 0x1f, 0xf8, 0x1f, 0xf8, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1b, 0xfc, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0x81, 0xff, 0xc0, 0x01, 0xf0, 0x1f, 0xf0,
  0x3f, 0xf8, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff,
  0xff, 0x01, 0xff, 0xc0, 0x03, 0xf0, 0x1f, 0xf0, 0x3f, 0xf0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xfe, 0x01, 0xff, 0x80, 0x02, 0xf0, 0x3f, 0xe0,
  0x7f, 0xe0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x0f, 0xff,
  0xf8, 0x03, 0xff, 0x80, 0x02, 0xff, 0xff, 0xe0, 0xff, 0xc0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xf0, 0x03, 0xff, 0x00, 0x0a, 0xff, 0xff, 0xc1,
  0xff, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x1f, 0xff,
  0xc0, 0x03, 0xff, 0x00, 0x0b, 0xf7, 0xff, 0xc7, 0xfe, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x0d, 0xf3, 0xff, 0xcf,
  0xfc, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x3f, 0xfe,
  0x00, 0x07, 0xfe, 0x00, 0x17, 0xf3, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x7f, 0xfc, 0x00, 0x07, 0xfc, 0x00, 0x17, 0xe3, 0xff, 0xfe,
  0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x3f, 0xf8, 0x7f, 0xf0,
  0x00, 0x07, 0xfc, 0x00, 0x3f, 0xe1, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x7f, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x3f, 0xe0, 0xff, 0xff,
  0x80, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0xff, 0x00,
  0x00, 0x0f, 0xfc, 0x00, 0x7f, 0xe0, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0xfe, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x7f, 0xc0, 0xff, 0xff,
  0xc0, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf1, 0xfe, 0x00,
  0x00, 0x0f, 0xf8, 0x00, 0xff, 0xc1, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xe2, 0xfe, 0x00, 0x00, 0x0f, 0xf8, 0x01, 0xff, 0xc1, 0xfe, 0x7f,
  0xf0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc1, 0xfe, 0x00,
  0x00, 0x0f, 0xf8, 0x01, 0xff, 0xc1, 0xfc, 0x1f, 0xf8, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0xff, 0xc3, 0xfc, 0x00, 0x00, 0x0f, 0xf8, 0x03, 0xff, 0xc1, 0x7c, 0x0f,
  0xf8, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0xfc, 0x00,
  0x00, 0x07, 0xf8, 0x07, 0xff, 0x81, 0xf8, 0x03, 0xfc, 0x00, 0x5f, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0xfc, 0x00, 0x00, 0x07, 0xf8, 0x07, 0xff, 0x82, 0xf8, 0x01,
  0xfe, 0x00, 0x5f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0xfc, 0x00,
  0x00, 0x07, 0xf8, 0x0f, 0xff, 0x83, 0xf0, 0x00, 0x7f, 0x00, 0x5f, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0xf8, 0x00, 0x00, 0x03, 0xf8, 0x1f, 0xff, 0x03, 0xf0, 0x00,
  0x7f, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0xf8, 0x00,
  0x00, 0x03, 0xf8, 0x3f, 0xfe, 0x03, 0xf0, 0x00, 0x3f, 0x80, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xbf, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x03, 0xfc, 0x7f, 0xfe, 0x07, 0xe0, 0x00,
  0x1f, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7f, 0xe0, 0x00, 0xf0, 0x00,
  0x00, 0x03, 0xfe, 0xff, 0xfc, 0x07, 0xe0, 0x00, 0x0f, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x07, 0xe0, 0x00,
  0x07, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0xf0, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xf8, 0x07, 0xc0, 0x00, 0x07, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x07, 0xc0, 0x00,
  0x03, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0xe0, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xf0, 0x07, 0xc0, 0x00, 0x03, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x07, 0x80, 0x00,
  0x01, 0x80, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0xe0, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xe0, 0x07, 0x80, 0x00, 0x01, 0x80, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x03, 0x00, 0x00,
  0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0xc0, 0x00,
  0x00, 0x00, 0x07, 0xff, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x80, 0x00,
  0x00, 0x00, 0x01, 0xfc, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe8, 0x00, 0x00, 0x00, 0x01, 0xd8, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x17, 0x80, 0x00, 0x29, 0xc0, 0x00, 0x10,
  0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0,
  0x00, 0xff, 0x80, 0x00, 0x0f, 0xd0, 0x01, 0xf8, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x03, 0x80,
  0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x00, 0x5f, 0xd0, 0x03, 0xfc,
  0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x17, 0x80, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xf8,
  0x00, 0x7f, 0xc0, 0x00, 0x5f, 0xa0, 0x06, 0xfe, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x17, 0xa0,
  0x3f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xf8, 0x00, 0x7f, 0xe0, 0x00, 0x7f, 0xa0, 0x0d, 0xfe,
  0x00, 0x0f, 0xff, 0x00, 0x40, 0x00, 0x2f, 0xf1, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x80,
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xf8,
  0x00, 0x7f, 0xe0, 0x00, 0x3f, 0xe0, 0x1b, 0xfe, 0x00, 0x1f, 0xff, 0x00, 0xc0, 0x00, 0x2f, 0xe7,
  0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xfc, 0x00, 0x7f, 0xf0, 0x00, 0x3f, 0xc0, 0x37, 0xff,
  0x00, 0x1f, 0xff, 0x03, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xfc,
  0x00, 0x5f, 0xf8, 0x00, 0xff, 0xc0, 0x37, 0xff, 0x00, 0x1f, 0xfc, 0x0f, 0xe0, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0xdf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaf, 0xfc, 0x00, 0x1f, 0xf0, 0x01, 0xff, 0xc0, 0x6b, 0xff,
  0x00, 0x3f, 0xfc, 0x1f, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x3f, 0xe1, 0xff, 0xff, 0xff, 0x9f,
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0xfc,
  0x00, 0xdf, 0xf0, 0x01, 0xff, 0x80, 0xc7, 0xff, 0x00, 0x3f, 0xf8, 0x1f, 0xe0, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xfc, 0x00, 0x9f, 0xf8, 0x01, 0xff, 0x81, 0xcf, 0xff,
  0x00, 0x7f, 0xf0, 0x1f, 0xf0, 0x00, 0xff, 0xd7, 0xff, 0xc0, 0x5f, 0xe0, 0x7f, 0xff, 0x80, 0x41,
  0xff, 0xe0, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xff, 0x7c,
  0x00, 0xbf, 0xf8, 0x01, 0xff, 0x81, 0xbf, 0xdf, 0x00, 0x7f, 0xe0, 0x0f, 0xf0, 0x00, 0xff, 0x8f,
  0xdc, 0x00, 0xbf, 0xe0, 0x1f, 0xff, 0x00, 0x00, 0x3f, 0xe0, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xff, 0x7c, 0x00, 0xff, 0xf8, 0x00, 0xff, 0x03, 0x7f, 0xdf,
  0x00, 0xff, 0xc0, 0x07, 0xf8, 0x01, 0x7f, 0x9f, 0xb0, 0x01, 0x7f, 0xe0, 0x1f, 0xf8, 0x00, 0x00,
  0x3f, 0xe0, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xff, 0x7c,
  0x01, 0xff, 0xfc, 0x00, 0xff, 0x07, 0x7f, 0x9f, 0x00, 0xff, 0xc0, 0x07, 0xf8, 0x01, 0xff, 0x1f,
  0x40, 0x02, 0xff, 0xe0, 0x1f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xfe, 0xfc, 0x01, 0x7f, 0xfe, 0x01, 0xff, 0x06, 0xff, 0xbf,
  0x00, 0xff, 0x80, 0x03, 0xf8, 0x07, 0xff, 0x0f, 0x00, 0x04, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x00,
  0x0f, 0xe0, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xfe, 0xfc,
  0x03, 0x7f, 0x7e, 0x01, 0xfe, 0x0d, 0xff, 0xbe, 0x01, 0xff, 0x80, 0x03, 0xfc, 0x03, 0xfe, 0x06,
  0x00, 0x09, 0xff, 0x80, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xfa, 0xf8, 0x03, 0x7e, 0x3e, 0x03, 0xfe, 0x1d, 0xfe, 0xbe,
  0x01, 0xff, 0x00, 0x01, 0xfc, 0x07, 0xfe, 0x0c, 0x00, 0x0b, 0xff, 0x00, 0x1f, 0xf8, 0x00, 0x00,
  0x1f, 0xf0, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xf2, 0xf8,
  0x03, 0x7e, 0x1f, 0x03, 0xfe, 0x1b, 0xfc, 0xbe, 0x03, 0xff, 0x00, 0x00, 0xfc, 0x0f, 0xfc, 0x00,
  0x00, 0x17, 0xfe, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xf2, 0xf8, 0x02, 0x7e, 0x0f, 0x07, 0xfc, 0x3b, 0xfc, 0xbe,
  0x03, 0xfe, 0x00, 0x00, 0xde, 0x0b, 0xf8, 0x00, 0x00, 0x2f, 0xfc, 0x00, 0xbf, 0xf8, 0x00, 0x00,
  0x3f, 0xe0, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xe2, 0xf8,
  0x02, 0xfe, 0x0f, 0x07, 0xfc, 0x37, 0xf8, 0xbe, 0x03, 0xfe, 0x00, 0x00, 0x7e, 0x1f, 0xf8, 0x00,
  0x00, 0x5f, 0xf8, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x7f, 0xe0, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x9f, 0xc4, 0xf8, 0x06, 0xfc, 0x07, 0x87, 0xfc, 0x67, 0xf1, 0x3e,
  0x03, 0xfc, 0x00, 0x00, 0x6e, 0x1f, 0xf0, 0x00, 0x00, 0xbf, 0xf0, 0x00, 0x7f, 0xe0, 0x00, 0x00,
  0x7f, 0xc0, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbf, 0xc6, 0xf8,
  0x06, 0xfc, 0x07, 0x8f, 0xf8, 0x6f, 0xf1, 0xbe, 0x07, 0xfc, 0x00, 0x00, 0x2e, 0x3f, 0xf0, 0x00,
  0x01, 0x3f, 0xe0, 0x00, 0xff, 0xe0, 0x00, 0x00, 0xff, 0x80, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x3f, 0x86, 0xf8, 0x04, 0xfc, 0x03, 0xcf, 0xf8, 0xcf, 0xe1, 0xbe,
  0x07, 0xfc, 0x00, 0x00, 0x1f, 0x3f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0xff, 0xc0, 0x00, 0x00,
  0xff, 0x81, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0x06, 0xf8,
  0x0d, 0xf8, 0x03, 0xef, 0xf8, 0xdf, 0xc1, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x17, 0x7f, 0xe0, 0x00,
  0x02, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x01, 0xff, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x7e, 0x07, 0xf8, 0x0d, 0xf8, 0x01, 0xef, 0xf9, 0xdf, 0x81, 0xfe,
  0x0f, 0xf8, 0x00, 0x00, 0x07, 0xdf, 0xc0, 0x00, 0x05, 0xff, 0x80, 0x01, 0xff, 0x80, 0x00, 0x07,
  0xff, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xfe, 0x05, 0xf8,
  0x0b, 0xf0, 0x01, 0xff, 0xf1, 0xbf, 0x81, 0x7e, 0x0f, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00,
  0x03, 0xff, 0x00, 0x05, 0xff, 0x00, 0x01, 0xff, 0xfe, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0xfc, 0x05, 0xf8, 0x1b, 0xf0, 0x00, 0xff, 0xf1, 0xbf, 0x01, 0x7e,
  0x0f, 0xf0, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x03, 0xfe, 0x00, 0x03, 0xff, 0x00, 0x00, 0x7f,
  0xfe, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xfc, 0x05, 0xf8,
  0x1b, 0xf0, 0x00, 0xff, 0xf3, 0x7f, 0x01, 0x7e, 0x0f, 0xe0, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00,
  0x07, 0xfc, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0xfc, 0x05, 0xf0, 0x13, 0xf0, 0x00, 0x7f, 0xe3, 0x7f, 0x01, 0x7c,
  0x1f, 0xe0, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x07, 0xff, 0x80, 0x00, 0x1f,
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xf8, 0x05, 0xf0,
  0x13, 0xe0, 0x00, 0x3f, 0xe6, 0x7e, 0x01, 0x7c, 0x1f, 0xe0, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00,
  0x1f, 0xf8, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1b, 0xf0, 0x07, 0xf0, 0x37, 0xe0, 0x00, 0x3f, 0xc6, 0xfc, 0x03, 0xfc,
  0x1f, 0xe0, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x07,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xf0, 0x0b, 0xf0,
  0x27, 0xe0, 0x00, 0x3f, 0xc6, 0xfc, 0x02, 0xfc, 0x1f, 0xe0, 0x00, 0x00, 0x06, 0xfe, 0x00, 0x00,
  0x6f, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1b, 0xe0, 0x0b, 0xf0, 0x2f, 0xc0, 0x00, 0x3f, 0xc4, 0xf8, 0x02, 0xfc,
  0x3f, 0xc0, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x5f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x07,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xe3, 0xcb, 0xf0,
  0x2f, 0xc0, 0x00, 0x3f, 0x8c, 0xf8, 0xf2, 0xfc, 0x3f, 0xc0, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00,
  0xbf, 0x80, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x33, 0xef, 0xff, 0xf0, 0x2f, 0xc0, 0x00, 0x3f, 0x8c, 0xfb, 0xff, 0xfc,
  0x3f, 0xc0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x01, 0x3f, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x07,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xcf, 0xff, 0xf8,
  0x2f, 0x80, 0x00, 0x7f, 0x89, 0xf3, 0xff, 0xfe, 0x3f, 0x80, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x02,
  0x7e, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x37, 0xc7, 0xff, 0xfe, 0x4f, 0x80, 0x00, 0x7f, 0x09, 0xf1, 0xff, 0xff,
  0xdf, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x02, 0xfc, 0x00, 0x00, 0x5f, 0xf0, 0x00, 0x02, 0x0f,
  0xe1, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xc3, 0xff, 0xff,
  0xdf, 0x80, 0x00, 0x7f, 0x09, 0xf0, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x04,
  0xf8, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x06, 0x0f, 0xe0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x37, 0x83, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0x09, 0xe0, 0xff, 0xff,
  0xff, 0x80, 0x00, 0x00, 0x37, 0xf0, 0x00, 0x09, 0xf0, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x0c, 0x0f,
  0xe0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x81, 0xff, 0xff,
  0xdf, 0x00, 0x00, 0xff, 0x0f, 0xe0, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x37, 0xe0, 0x00, 0x07,
  0xff, 0xe0, 0x00, 0x3f, 0xe0, 0x00, 0x1c, 0x1f, 0xc0, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0xff, 0xf0, 0x1e, 0x00, 0x00, 0xfe, 0x0f, 0xe0, 0x3f, 0xfc,
  0x0f, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x7f, 0xc0, 0x01, 0x18, 0x1f,
  0xc0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x1f, 0xe0,
  0x1e, 0x00, 0x00, 0xfe, 0x07, 0xe0, 0x07, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x6f, 0xc0, 0x03, 0xff,
  0xff, 0xff, 0xc0, 0x7f, 0xc0, 0x02, 0x78, 0x1f, 0x80, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x17, 0xc0, 0x3e, 0x00, 0x00, 0xfe, 0x01, 0xe0, 0x05, 0xf0,
  0x07, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xc0, 0x0c, 0xf0, 0x1f,
  0x80, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x17, 0xc0,
  0x3c, 0x00, 0x00, 0xfc, 0x00, 0xe0, 0x05, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x5f, 0x80, 0x0f, 0xff,
  0xff, 0xff, 0xf8, 0xff, 0xc0, 0x1f, 0xe0, 0x3f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x17, 0x80, 0x34, 0x00, 0x00, 0xfc, 0x00, 0xe0, 0x05, 0xe0,
  0x07, 0x00, 0x00, 0x00, 0x5f, 0x80, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xc0, 0x7f, 0xc0, 0x2f,
  0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x17, 0x80,
  0x74, 0x00, 0x00, 0xfc, 0x00, 0x60, 0x07, 0xe0, 0x0b, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x01, 0xff,
  0xff, 0xff, 0xfe, 0x7f, 0xc1, 0xff, 0xc0, 0x2f, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x1f, 0x80, 0x7c, 0x00, 0x00, 0xf8, 0x00, 0x60, 0x07, 0xe0,
  0x07, 0x3f, 0xfc, 0x00, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xc7, 0xff, 0x80, 0x3f,
  0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x1f, 0x80,
  0x78, 0x00, 0x00, 0xf8, 0x00, 0x60, 0x07, 0xe0, 0x07, 0xff, 0xff, 0x80, 0xfe, 0x00, 0x01, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3e, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x70, 0x00, 0x00, 0xf0, 0x00, 0x20, 0x07, 0xc0,
  0x1f, 0xff, 0xff, 0xc0, 0x3e, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xfe, 0x00, 0x3e,
  0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0x60, 0x00, 0x00, 0xf0, 0x00, 0x10, 0x03, 0xc0, 0xff, 0xff, 0xff, 0xf0, 0x3c, 0x00, 0x00, 0x7f,
  0x00, 0x07, 0xff, 0x8f, 0xff, 0xfe, 0x00, 0x3c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x03, 0xc3,
  0xff, 0xff, 0xff, 0xf8, 0x7c, 0x00, 0x00, 0x70, 0x00, 0x00, 0x3f, 0x83, 0xff, 0xf8, 0x00, 0x3c,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x03, 0x8f, 0xff, 0xff, 0xfe, 0xfe, 0x7c, 0x00, 0x00, 0x40,
  0x00, 0x00, 0x0f, 0x83, 0xff, 0xf0, 0x00, 0x18, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 0x9f,
  0xff, 0xff, 0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x81, 0xff, 0xe0, 0x00, 0x18,
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00,
  0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x80, 0xff, 0xc0, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xc0, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x07, 0xef,
  0xff, 0xe0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x7f, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00,
  0xc0, 0x00, 0x01, 0x80, 0x00, 0x00, 0x07, 0x8f, 0xff, 0xc0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x07, 0x0f,
  0xfe, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x0f, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x01,
  0xf0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};


void setup() {
  pinMode(redButtonPin, INPUT_PULLUP);
  pinMode(blueButtonPin, INPUT_PULLUP);
  lcd.begin(16, 2);

  Serial.begin(256000);

  //Activate interruptions activated by any RCA state change
  attachInterrupt(digitalPinToInterrupt(rcaPin), changingRCA, CHANGE);

  lcd.setCursor(2, 0);
  lcd.print("CHRONOJUMP");
  lcd.setCursor(2, 1);
  lcd.print("Boscosystem");
  delay(1000);

  EEPROM.get(tareAddress, tareValue);
  //If the arduino has not been tared the default value in the EEPROM is -151.
  //TODO: Check that it is stil true in the current models
  if (tareValue == -151) {
    scale.set_offset(10000);// Usual value  in Chronojump strength gauge
    EEPROM.put(tareAddress, 10000);
  } else {
    scale.set_offset(tareValue);
  }


  //The factor to convert the units coming from the cell to the units used in the calibration
  float calibration_factor = 0.0f;
  EEPROM.get(calibrationAddress, calibration_factor);
  if (isnan(calibration_factor)) {
    scale.set_scale(915.0);// Usual value  in Chronojump strength gauge
    EEPROM.put(calibrationAddress, 915.0);
  } else {
    scale.set_scale(calibration_factor);
  }

  //Every second the battery level is updated via interrupts
  MsTimer2::set(1000, showBatteryLevel);
  MsTimer2::start();


  //showMenu();

  //Start TFT
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(CJCOLOR);
  //  tft.fillRect(0, 0, 160, 120, BLACK);
  //  tft.fillRect(160, 0, 160, 120, WHITE);

  drawMenuBackground();
  showMenu();

  // Draw the bitmap:
  // drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  //tft.drawBitmap(0, 0, logo, 320, 240, WHITE);
  //delay(2000);
  //  tft.setCursor(110, 120);
  //  tft.println("Card initialized");
}

void loop()
{
  if (!capturing)
  {
    //The blue button navigates through the Menu options
    blueButtonState = !digitalRead(blueButtonPin);
    if (blueButtonState) {
      blueButtonState = false;
      menu++;
      menu = menu % 4;
      showMenu();
    }
    delay(100);

    //The red button activates the menu option
    redButtonState = !digitalRead(redButtonPin);
    if (redButtonState)
    {
      redButtonState = false;
      if (menu == 0)
      {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Starting capture");
        PCControlled = false;
        delay(200);
        start_capture();
      } else if (menu == 1)
      {
        tareTemp();
        start_capture();
      } else if (menu == 2)
      {
        start_steadiness();

      } else if (menu == 3)
      {
        showSystem();
        menu = 0;
        showMenu();
      }
    }
  } else
  {
    capture();
  }

  //With Teensy serialEvent is not called automatically after loop
  if (Serial.available()) serialEvent();
}

/*
  void showMenu(void)
  {
  lcd.clear();
  showBatteryLevel();
  //Showing the menu option
  lcd.setCursor(0, 0);
  lcd.print(menuList[menu]);
  //Showing the next menu number in the upper right corner
  lcd.setCursor(14, 0);
  lcd.print((menu + 1) % 4 + 1);
  //The up arrow is associated to the blue button
  lcd.createChar(6, upArrow);
  lcd.setCursor(15, 0);
  lcd.write(byte (6));
  //the down arrow is associated to the red button
  lcd.createChar(7, downArrow);
  lcd.setCursor(15, 1);
  lcd.write(byte (7));

  if (menu == 0)
  {
    lcd.setCursor(10, 1);
    lcd.print("Start");
  } else if (menu == 1)
  {
    lcd.setCursor(5, 1);
    lcd.print("Tare&Start");
  } else if (menu == 2)
  {
    lcd.setCursor(10, 1);
    lcd.print("Start");
  } else if (menu == 3)
  {
    lcd.setCursor(11, 1);
    lcd.print("Enter");
  }
  delay(100);
  }
*/

void showMenu(void)
{
  Serial.println("In showMenu");
  tft.fillRect(30, 0, 260, 50, BLACK);
  tft.setCursor(60, 20);
  tft.print(menuList[menu]);
}

void capture(void)
{
  Serial.println("In capture");
  //Graph(tft, xGraph, measured, 30, 240, 320, 240, -20, 320, 100, measuredMin, measuredMax, 100, "", "", "", WHITE, WHITE, BLUE, WHITE, BLACK, display1);

  //Position graph's lower left corner.
  double graphX = 30;
  double graphY = 240;

  //Size of the graph
  double graphW = 320;
  double graphH = 240;

  //Minimum and maximum values to show
  double xMin = -20;
  double xMax = 280;

  //Size an num of divisions
  double yDivSize = 100;
  double yDivN = 10;
  double xDivSize = 100;
  double xDivN = 3;

  MsTimer2::stop();

  tft.fillScreen(BLACK);

  double xGraph = 0;

  while (capturing)
  {
    xGraph = 0;
    tft.fillScreen(BLACK);
    display1 = true;
    while (xGraph != 300) {
      //Checking the RCA state
      if (rcaState != lastRcaState) {       //Event generated by the RCA
        Serial.print(rcaTime);
        Serial.print(";");

        if (rcaState) {
          Serial.println("R");
          forceTrigger = measured;
        } else {
          Serial.println("r");
        }
        lastRcaState = rcaState;

        //If no RCA event, read the force as usual
      } else {
        //rcaTime = totalTime;
        measured = scale.get_units();

        //When current Force Slot is equal to size of the buffer it starts over to 0
        currentFSlot = (currentFSlot + 1) % freq;
        //wHEN current Time Slot is equal to the size of the buffer it starts over to 0
        currentTSlot = (currentTSlot + 1) % samples200ms;

        if (currentTSlot > 0) elapsed1Sample = true;    //There's a previous sample
        if (currentTSlot >= (samples200ms - 1)) elapsed200 = true;
        if (currentTSlot >= (samples100ms - 1)) elapsed100 = true;

        forces1s[currentFSlot] = measured;
        totalTimes1s[currentTSlot] = totalTime;

        //Calculating the average during 1s
        float sumForces = 0;
        for (unsigned short i = 0; i < freq; i++) {
          sumForces += forces1s[i];
        }

        //Mean forces = sum of the forces divided by the number of samples in 1 second
        meanForce1s = sumForces / freq;

        if (abs(meanForce1s) > abs(maxMeanForce1s)) maxMeanForce1s = meanForce1s;

        //In the final phase of steadiness measure. Actual calculation
        if (capturingSteadiness)
        {
          sumSSD += (sq(measured - lastMeasure));
          sumMeasures += measured;
          samplesSSD++;
          lastMeasure = measured;
          RMSSD = sqrt(sumSSD / (samplesSSD - 1));
          cvRMSSD = 100 * RMSSD / ( sumMeasures / samplesSSD);
          if (samplesSSD >= 5 * (freq - 1))
          {
            end_steadiness();
          }
        }


        //RFD stuff start ------>

        //To go backwards N slots use [currentSlot + TotalPositions - N]
        if (elapsed1Sample) {
          impulse += (((measured + forces1s[(currentFSlot + freq - 1) % freq])  / 2) *      //Mean force between 2 samples
                      (totalTime - totalTimes1s[(currentTSlot + samples200ms - 1) % samples200ms]) / 1e6);  //Elapsed time between 2 samples
        }

        if (elapsed200) {
          RFD200 = (measured - forces1s[(currentFSlot + freq - samples200ms) % freq]) /     //Increment of the force in 200ms
                   ((totalTime - totalTimes1s[(currentTSlot + 1) % samples200ms]) / 1e6);          //Increment of time
          if (abs(maxRFD200) < abs(RFD200)) maxRFD200 = RFD200;
        }

        if (elapsed100) {
          RFD100 = (measured - forces1s[(currentFSlot + freq - samples100ms) % freq]) /     //Increment of the force in 200ms
                   ((totalTime - totalTimes1s[(currentTSlot + samples200ms - samples100ms) % samples200ms]) / 1e6); //Increment of time
          if (abs(maxRFD100) < abs(RFD100)) maxRFD100 = RFD100;
        }
        //<------- RFD stuff end

        //Negative numbers treated as positives to calculate the max
        if (abs(measured) > abs(measuredLcdDelayMax)) {
          measuredLcdDelayMax = measured;
        }
        if (measured > measuredMax) {
          measuredMax = measured;
          yDivSize = (measuredMax - measuredMin) / yDivN;
        }
        if (measured < measuredMin) {
          measuredMin = measured;
          yDivSize = (measuredMax - measuredMin) / yDivN;
        }

        Serial.print(totalTime); Serial.print(";");
        Serial.println(measured, 2); //scale.get_units() returns a float

        //printOnLcd();
        //Graph(tft, x, v, 30, 240, 320, 240, 0, 320, 100, 0, v_max, 100, "", "", "", WHITE, WHITE, BLUE, WHITE, BLACK, display1);
        //Graph(tft, xGraph, measured, graphX, graphY, graphW, graphH, xMin, xMax, xDiv, measuredMin, yDiv, "", "", "", WHITE, WHITE, BLUE, WHITE, BLACK, display1);
        Graph(tft, xGraph, measured, graphX, graphY, graphW, graphH, xMin, xMax, xDivSize, measuredMin, measuredMax, yDivSize, "", "", "", WHITE, WHITE, BLUE, WHITE, BLACK, display1);
        xGraph++;
      }

      //Pressing blue or red button ends the capture
      redButtonState = !digitalRead(redButtonPin);
      blueButtonState = !digitalRead(blueButtonPin);
      if (redButtonState || blueButtonState) {
        Serial.println("Button pressed");
        redButtonState = false;
        blueButtonState = false;
        if (! (capturingPreSteadiness || capturingSteadiness)) //Not in any steadiness phase
        {
          end_capture();
          xGraph = 300;
        } else if (capturingPreSteadiness)  //In Pre steadiness. Showing force until button pressed
        {
          //        Serial.println("BeginSteadiness");
          capturingPreSteadiness = false;
          capturingSteadiness = true;
          start_capture();
        }
      }
    }
  }
  MsTimer2::start();
}

//TODO: manage the delay in LCD write with a timer
void printOnLcd() {
  lcdCount = lcdCount + 1;
  if (lcdCount >= lcdDelay)
  {
    lcd.clear();

    if (capturingSteadiness) {
      lcd.createChar(7, recordChar);
      lcd.setCursor(0, 0);
      lcd.write(byte (7));
    }
    //Upper left
    printLcdFormat (measuredLcdDelayMax, 4, 0, 1);
    //Lower left
    printLcdFormat (maxMeanForce1s, 4, 1, 1);
    //Upper right
    printLcdFormat (totalTime / 1e6, 15, 0, 0); //Showing total capture time in seconds
    //Lower right
    printLcdFormat (impulse, 13, 1, 1);

    measuredLcdDelayMax = 0;
    lcdCount = 0;
  }
}

void printLcdFormat (float val, int xStart, int y, int decimal) {

  /*How many characters are to the left of the units number.
     Examples:
     1.23   -> 0 charachters
     12.34  -> 1 characters
     123.45 -> 2 characters
  */
  int fontSize = 2;
  int charWidth[3] = {10, 15, 20};

  int valLength = floor(log10(abs(val)));

  // Adding the extra characters to the left
  if (valLength > 0) {
    xStart = valLength*charWidth[fontSize];
  }

  // In negatives numbers the units are in the same position and the minus one position to the left
  if (val < 0) {
    xStart - charWidth[fontSize];
  }
  tft.setCursor(xStart*charWidth[fontSize]  , y);
  tft.print(val, decimal);
}

void printTftFormat (float val, int xStart, int y, int decimal) {

  /*How many characters are to the left of the units number.
     Examples:
     1.23   -> 0 charachters
     12.34  -> 1 characters
     123.45 -> 2 characters
  */

  //Font sizes: 5x8, 10x16, 15x24, or 20x32
  //Theres a pixel between characters
  int fontSize = 2;
  int charWidth = 5 * fontSize + 1;
  int valLength = floor(log10(abs(val)));

  // Adding the extra characters to the left
  if (valLength > 0) {
    xStart = xStart - valLength*charWidth;
  }

  // In negatives numbers the units are in the same position and the minus one position to the left
  if (val < 0) {
    xStart = xStart - charWidth;
  }

  tft.setCursor(xStart , y);
  tft.print(val, decimal);
}

void serialEvent() {
  String inputString = Serial.readString();
  String commandString = inputString.substring(0, inputString.lastIndexOf(":"));


  if (commandString == "start_capture") {
    PCControlled = true;
    start_capture();
    //capture();
  } else if (commandString == "end_capture") {
    end_capture();
  } else if (commandString == "get_version") {
    get_version();
  } else if (commandString == "get_calibration_factor") {
    get_calibration_factor();
  } else if (commandString == "set_calibration_factor") {
    set_calibration_factor(inputString);
  } else if (commandString == "calibrate") {
    calibrate(inputString);
  } else if (commandString == "get_tare") {
    get_tare();
  } else if (commandString == "set_tare") {
    set_tare(inputString);
  } else if (commandString == "tare") {
    tare();
  } else if (commandString == "get_transmission_format") {
    get_transmission_format();
    /* Commented due to memory optimization
      //  } else if (commandString == "send_sync_signal") {
      //    sendSyncSignal();
      //  } else if (commandString == "listen_sync_signal") {
      //    listenSyncSignal();
    */
  } else {
    Serial.println("Not a valid command");
  }
  inputString = "";

}

void start_capture()
{
  //Disabling the battery level indicator
  MsTimer2::stop();
  Serial.println("Starting capture...");
  totalTime = 0;
  lastTime = micros();
  measuredMax = 0;
  impulse = 0;

  //filling the array of forces ant times with initial force
  lastMeasure = scale.get_units();
  for (unsigned short i = 0; i < freq; i++) {
    forces1s[i] = lastMeasure;
  }

  for (short i = 0; i < samples200ms; i++) {
    totalTimes1s[i] = 0;
  }

  maxMeanForce1s = lastMeasure;

  //Initializing variability variables
  sumSSD = 0.0;
  sumMeasures = lastMeasure;
  samplesSSD = 0;
  lcd.clear();
  capturing = true;
}

void end_capture()
{
  capturing = false;
  Serial.println("Capture ended:");
  delay(500);

  //If the device is controlled by the PC the results menu is not showed
  //because during the menu navigation the Serial is not listened.
  if (!PCControlled) {
    //Restoring tare value in the EEPROM. Necessary after Tare&Capture
    EEPROM.get(tareAddress, tareValue);
    scale.set_offset(tareValue);
    Serial.println(scale.get_offset());
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Results:");
    showResults();
  }

  //Activating the Battery level indicator
  MsTimer2::start();
  showMenu();
}

void get_version()
{
  //Device string not in a variable due to memory optimization
  Serial.print("Force_Sensor-");
  Serial.println(version);
}

void get_calibration_factor()
{
  Serial.println(scale.get_scale());
}

void set_calibration_factor(String inputString)
{
  //Reading the argument of the command. Located within the ":" and the ";"
  String calibration_factor = get_command_argument(inputString);
  //Serial.println(calibration_factor.toFloat());
  scale.set_scale(calibration_factor.toFloat());
  float stored_calibration = 0.0f;
  EEPROM.get(calibrationAddress, stored_calibration);
  if (stored_calibration != calibration_factor.toFloat()) {
    EEPROM.put(calibrationAddress, calibration_factor.toFloat());
  }
  Serial.println("Calibration factor set");
}

void calibrate(String inputString)
{
  //Reading the argument of the command. Located within the ":" and the ";"
  String weightString = get_command_argument(inputString);
  float weight = weightString.toFloat();
  //mean of 255 values comming from the cell after resting the offset.
  double offsetted_data = scale.get_value(50);

  //offsetted_data / calibration_factor
  float calibration_factor = offsetted_data / weight / 9.81; //We want to return Newtons.
  scale.set_scale(calibration_factor);
  EEPROM.put(calibrationAddress, calibration_factor);
  Serial.print("Calibrating OK:");
  Serial.println(calibration_factor);
}

void tare()
{
  lcd.clear();
  lcd.setCursor(3, 0);
  lcd.print("Taring...");
  scale.tare(50); //Reset the scale to 0 using the mean of 255 raw values
  EEPROM.put(tareAddress, scale.get_offset());
  Serial.print("Taring OK:");
  Serial.println(scale.get_offset());


  lcd.setCursor(3, 0);
  lcd.print("  Tared  ");
  delay(300);
}

void tareTemp()
{
  lcd.clear();
  lcd.setCursor(3, 0);
  lcd.print("Taring...");
  scale.tare(50); //Reset the scale to 0 using the mean of 255 raw values
  lcd.setCursor(3, 0);
  lcd.print("  Tared  ");
  delay(300);
}

void get_tare()
{
  Serial.println(scale.get_offset());
}

void set_tare(String inputString)
{
  String tare = get_command_argument(inputString);
  long value = tare.toInt();
  scale.set_offset(value);
  long stored_tare = 0;
  EEPROM.get(tareAddress, stored_tare);
  if (stored_tare != value) {
    EEPROM.put(tareAddress, value);
    Serial.println("updated");
  }
  Serial.println("Tare set");
}

String get_command_argument(String inputString)
{
  return (inputString.substring(inputString.lastIndexOf(":") + 1, inputString.lastIndexOf(";")));
}

void get_transmission_format()
{
  if (binaryFormat)
  {
    Serial.println("binary");
  } else
  {
    Serial.println("text");
  }
}

void changingRCA() {
  //TODO: Check the overflow of the lastTriggerTime
  detachInterrupt(digitalPinToInterrupt(rcaPin));
  rcaTime = totalTime;

  rcaState = digitalRead(rcaPin);

  attachInterrupt(digitalPinToInterrupt(rcaPin), changingRCA, CHANGE);
}

void calibrateLCD(void) {
  MsTimer2::stop();
  short increment = 1;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print((menu + 1) % 4 + 1);
  lcd.print("-Calibrate    >");
  int weight = 1;
  submenu = 0;
  bool exitFlag = false;
  String calibrateCommand = calibrateCommand + String(weight, DEC) + ";";
  //  showCalibrateLoad(String(weight, DEC));
  lcd.setCursor(15, 0);
  lcd.print(">");
  lcd.setCursor(2, 1);
  lcd.print(" Current:" );
  lcd.print(weight);
  lcd.setCursor(14, 1);
  lcd.print("+");
  lcd.print(increment);
  delay(200);
  redButtonState = false;
  while (!exitFlag) {
    if (submenu == 0) {

      if (redButtonState) {
        weight += increment;
        if (weight == 101) {
          weight = 1;
          lcd.setCursor(12, 1);
          lcd.print("  ");
        }

        lcd.setCursor(11, 1);
        lcd.print(weight);

        if (weight == 5) {
          increment = 5;
          lcd.setCursor(14, 1);
          lcd.print("+");
          lcd.print(increment);
        } else if (weight == 100) {
          increment = 1;
          lcd.setCursor(14, 1);
          lcd.print("+");
          lcd.print(increment);
        }

        calibrateCommand = calibrateCommand + String(weight, DEC) + ";";
        delay(200);
      }
      if (blueButtonState) {
        //Change to Calibrate execution
        lcd.clear();
        lcd.setCursor(10, 0);
        lcd.print("Cancel");
        lcd.setCursor(0, 1);
        lcd.print("StartCalibration");
        submenu = 1;
        blueButtonState = false;
        delay(200);
      }
    }

    if (submenu == 1) {
      if (redButtonState) {
        lcd.clear();
        lcd.setCursor(1, 0);
        lcd.print("Calibrating...");
        calibrate(calibrateCommand);
        lcd.clear();
        lcd.setCursor(2, 0);
        lcd.print("Calibrated");
        exitFlag = true;
        delay(200);
      }
      if (blueButtonState) {
        exitFlag = true;
      }
    }

    redButtonState = !digitalRead(redButtonPin);
    blueButtonState = !digitalRead(blueButtonPin);
    Serial.println(redButtonState);
  }
  delay(1000);
  MsTimer2::start();
  showMenu();
}

void showBatteryLevel() {
  float sensorValue = analogRead(A0);
  if (sensorValue >= 788) {
    lcd.createChar(0, battery5);
  } else if (sensorValue < 788 && sensorValue >= 759) {
    lcd.createChar(0, battery4);
  } else if (sensorValue < 759 && sensorValue >= 730) {
    lcd.createChar(0, battery3);
  } else if (sensorValue < 730 && sensorValue >= 701) {
    lcd.createChar(0, battery2);
  } else if (sensorValue < 701 && sensorValue >= 672) {
    lcd.createChar(0, battery1);
  } else if (sensorValue <= 701) {
    lcd.createChar(0, battery0);
  }
  lcd.setCursor(0, 1);
  lcd.write(byte (0));
}

//TODO: Add more information or eliminate
void showSystemInfo() {
  MsTimer2::stop();
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Ver: ");
  lcd.print(version);
  lcd.setCursor(2, 1);
  lcd.print("submenu: ");
  lcd.print(submenu);
  delay(1000);
  redButtonState = !digitalRead(redButtonPin);
  submenu = 0;
  while (!redButtonState) {
    blueButtonState = !digitalRead(blueButtonPin);
    if (blueButtonState) {
      delay(200);
      submenu++;
      submenu = submenu % 3;
      if (submenu == 0) {
        lcd.setCursor(2, 0);
        lcd.print("Ver: ");
        lcd.print(version);
        lcd.setCursor(2, 1);
        lcd.print("submenu: ");
        lcd.print(submenu);
      } else if (submenu == 1) {
        lcd.setCursor(2, 1);
        lcd.print("submenu: ");
        lcd.print(submenu);
      } else if (submenu == 2) {
        lcd.setCursor(2, 1);
        lcd.print("submenu: ");
        lcd.print(submenu);
      }
    }
    redButtonState = !digitalRead(redButtonPin);
  }
  MsTimer2::start();
}

void showResults() {
  Serial.println("In showResults");
  int submenu = 4;
  redButtonState = false;
  tft.fillScreen(BLACK);
  tft.setTextSize(3);
  tft.setCursor(100,0);
  tft.print("Results");

  //Showing menu 0
  tft.drawLine(0,20,320,20, GREY);
  tft.drawLine(160,240,160,20, GREY);
  tft.setTextSize(2);
  
  tft.setCursor(0, 40);
  tft.print("Fmax");
  printTftFormat(measuredMax, 100, 40, 1);

  tft.setCursor(170, 40);
  tft.print("Fmax1s");
  printTftFormat(maxMeanForce1s, 280, 40, 1);
  
  tft.setCursor(0, 80);
  tft.print("Ftrig");
  printTftFormat(forceTrigger, 100, 80, 1);
    
  tft.setCursor(170, 80);
  tft.print("Imp");
  printTftFormat(impulse, 280, 80, 1);
    
  tft.setCursor(0, 120);
  tft.print("RFD100");
  printTftFormat(maxRFD100, 124, 120, 0);
    
  tft.setCursor(170, 120);
  tft.print("RFD200");
  printTftFormat(maxRFD200, 304, 120, 0);
    
  tft.setCursor(0, 160);
  tft.print("RMSSD");
  printTftFormat(RMSSD, 100, 160, 1);
    
  tft.setCursor(170, 160);
  tft.print("cvRMSSD");
  printTftFormat(RMSSD, 280, 160, 1);
  //Red button exits results
  while (!redButtonState) {
    blueButtonState = !digitalRead(blueButtonPin);
    redButtonState = !digitalRead(redButtonPin);
    //Blue button changes menu option
    if (blueButtonState) {
      Serial.println("Blue pressed");
      blueButtonState = false;
    }
  }
  Serial.println("Red pressed");
  redButtonState = false;
  delay(200);
  drawMenuBackground();
  tft.fillRect(0, 0, 320, 240, BLACK);
}

void showSystem()
{
  bool exitFlag = false;

  showSystemMenu();

  blueButtonState = false;
  redButtonState = false;

  while (!exitFlag) {
    while (!blueButtonState && !redButtonState)
    {
      redButtonState = !digitalRead(redButtonPin);
      blueButtonState = !digitalRead(blueButtonPin);
    }

    //Blue button pressed. Change submenu option
    if (blueButtonState) {
      blueButtonState = false;
      submenu = (submenu + 1) % 3;
      showSystemMenu();

    }
    //Red button pressed. Execute the menu option
    if (redButtonState) {
      redButtonState = false;
      exitFlag = true;
      if (submenu == 0) {
        tare();
        menu = 0;
        showMenu();
      } else if (submenu == 1)
      {
        calibrateLCD();
        menu = 0;
        showMenu();
      } else if (submenu == 2) {
        showSystemInfo();
        menu = 0;
        showMenu();
      }
    }
  }
  delay(200);
}

void showSystemMenu() {
  Serial.println(submenu);
  String configOptions[] = {
    "1-Tare",
    "2-Calibrate",
    "3-Info",
  };


  Serial.println(configOptions[submenu]);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(configOptions[submenu]);

  lcd.setCursor(14, 0);
  lcd.print((submenu + 1) % 3 + 1);

  //The up arrow is associated to the blue button
  lcd.createChar(6, upArrow);
  lcd.setCursor(15, 0);
  lcd.write(byte (6));
  //the down arrow is associated to the red button
  lcd.createChar(7, downArrow);
  lcd.setCursor(15, 1);
  lcd.write(byte (7));

  if (submenu == 0) {         //Tare option
    lcd.setCursor(11, 1);
    lcd.print("Start");
  } else if (submenu == 1) {  //Calibrate option
    lcd.setCursor(11, 1);
    lcd.print("Start");
  } else if (submenu == 2) {  //Info option
    lcd.setCursor(12, 1);
    lcd.print("Show");
  }

  delay(200);
}

void start_steadiness()
{
  totalTime = 0;
  lastTime = micros();

  lcd.clear();
  capturing = true;
  capturingPreSteadiness = true;
  delay(200);
}

void end_steadiness()
{
  capturing = false;
  capturingSteadiness = false;
  showSteadinessResults();
}

void showSteadinessResults()
{
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("RMSSD ");
  printLcdFormat(RMSSD, 11, 0, 1);
  lcd.setCursor(0, 1);
  lcd.print("cvRMSSD  ");
  printLcdFormat(cvRMSSD, 11, 1, 1);
  lcd.createChar(7, exitChar);
  lcd.setCursor(15, 1);
  lcd.write(byte (7));
  delay(1000);
  redButtonState = false;
  blueButtonState = false;
  //Checking buttons state every 50 ms
  while (!redButtonState && !blueButtonState)
  {
    delay(50);
    redButtonState = !digitalRead(redButtonPin);
    blueButtonState = !digitalRead(blueButtonPin);
  }
  delay(200);
  MsTimer2::start();
  showMenu();
}

void Graph(Adafruit_ILI9341 &d, double x, double y, double gx, double gy, double w, double h, double xlo, double xhi, double xinc, double ylo, double yhi, double yinc, String title, String xlabel, String ylabel, unsigned int gcolor, unsigned int acolor, unsigned int pcolor, unsigned int tcolor, unsigned int bcolor, boolean &redraw)
{

  double ydiv, xdiv;
  // initialize old x and old y in order to draw the first point of the graph
  // but save the transformed value
  // note my transform funcition is the same as the map function, except the map uses long and we need doubles
  //static double ox = (x - xlo) * ( w) / (xhi - xlo) + gx;
  //static double oy = (y - ylo) * (gy - h - gy) / (yhi - ylo) + gy;
  double i;
  double temp;
  int rot, newrot;

  if (redraw == true)
  {

    redraw = false;
    ox = (x - xlo) * ( w) / (xhi - xlo) + gx;
    oy = (y - ylo) * (gy - h - gy) / (yhi - ylo) + gy;
    // draw y scale
    for ( i = ylo; i <= yhi; i += yinc)
    {
      // compute the transform
      temp =  (i - ylo) * (gy - h - gy) / (yhi - ylo) + gy;

      if (i == 0)
      {
        d.drawLine(gx, temp, gx + w, temp, acolor);
      }
      else
      {
        d.drawLine(gx, temp, gx + w, temp, gcolor);
      }

      d.setTextSize(1);
      d.setTextColor(tcolor, bcolor);
      //d.setCursor(gx - 40, temp);
      d.setCursor(gx - 20, temp);
      // precision is default Arduino--this could really use some format control
      d.println((int)round(i));
    }
    // draw x scale
    for (i = xlo; i <= xhi; i += xinc) {

      // compute the transform

      temp =  (i - xlo) * ( w) / (xhi - xlo) + gx;
      if (i == 0) {
        d.drawLine(temp, gy, temp, gy - h, acolor);
      }
      else {
        d.drawLine(temp, gy, temp, gy - h, gcolor);
      }

      d.setTextSize(1);
      d.setTextColor(tcolor, bcolor);
      d.setCursor(temp, gy + 10);
      // precision is default Arduino--this could really use some format control
      d.println(round(i));
    }

    //now draw the labels
    d.setTextSize(2);
    d.setTextColor(tcolor, bcolor);
    d.setCursor(gx , gy - h - 30);
    d.println(title);

    d.setTextSize(1);
    d.setTextColor(acolor, bcolor);
    d.setCursor(gx , gy + 20);
    d.println(xlabel);

    d.setTextSize(1);
    d.setTextColor(acolor, bcolor);
    d.setCursor(gx - 30, gy - h - 10);
    d.println(ylabel);


  }

  //graph drawn now plot the data
  // the entire plotting code are these few lines...
  // recall that ox and oy are initialized as static above
  x =  (x - xlo) * ( w) / (xhi - xlo) + gx;
  y =  (y - ylo) * (gy - h - gy) / (yhi - ylo) + gy;
  d.drawLine(ox, oy, x, y, pcolor);
  d.drawLine(ox, oy + 1, x, y + 1, pcolor);
  d.drawLine(ox, oy - 1, x, y - 1, pcolor);
  ox = x;
  oy = y;

}

void drawMenuBackground() {
  tft.fillRect(0, 0, 320, 50, BLACK);
  tft.fillRoundRect(0, 0, 30, 50, 10, WHITE);
  tft.fillRoundRect(290, 0, 30, 50, 10, WHITE);
  tft.setTextSize(3);
  tft.setCursor(30, 20);
}
