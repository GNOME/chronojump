if you want to debug a vector just print like this:

print(displacement)

will produce in console:

  [1]  1 -1 -1 -1  0 -1 -1 -1  0 -1 -1 -1 -1  0 -1 -1 -1  0 -1 -1 -1 -1  0 -1 -1
 [26] -1  0 -1 -1 -1 -1  0 -1 -1 -1  0 -1 -1 -1  0 -1 -1 -1 -1  0 -1 -1 -1  0 -1
 [51] -1 -1  0 -1 -1 -1 -1  0 -1 -1 -1  0 -1 -1 -1  0 -1 -1 -1  0 -1 -1 -1  0 -1
 ....

copy paste in vim and there remove the initial [xxx] using:
:%s/\[.*\]//

save:
:w

then open in R
a=scan("myfile.txt")


If you want to check better eg what graph.R is doing, just do:

Do the graph with Chronojump, some files will be created like: /tmp/Roptions.txt, /tmp/chronojump-encoder-graph-input-multi.csv, /tmp/chronojump_enc_curve_1.txt
at encoder folder call R

# 1st time
source ("util.R")
source ("graphSmoothingEC.R")
source ("graph.R")
optionsFile = "/tmp/Roptions.txt"
options <- scan(optionsFile, comment.char="#", what=character(), sep="\n")
DebugFileName <- paste(options[5], "/chronojump-debug.txt", sep="")
English = unlist(strsplit(options[29], "\\;"))
Translated = unlist(strsplit(options[30], "\\;"))
Debug <- TRUE

# each time you do an analyze on Chronojump (and Roptions.txt changed)
options <- scan(optionsFile, comment.char="#", what=character(), sep="\n")
doProcess (options)

# plot displacement curves graph and write files in order to compare them with vim
displacementCurvesDebug (TRUE)

# Note warnings sometimes continue appearing even when code has changed and source has done, is best to close/open terminal console

#using debug is very useful, eg:

d <- scan ("tests/fixEccConCutOnNotSingleFile/curve1.txt", sep = ",")
d  = d[!is.na(d)]
debug (reduceCurveByPredictStartEnd)
reduceCurveByPredictStartEnd (d, "ec", 20)

#then you can press n for seeing NEXT line of code and print (variable) to print the value, note if a you see var <- "my var", this is going to be assigned on next step

