// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------



/// <remarks/>
/// <remarks>
///ChronojumpServerAlive
///</remarks>
[System.Web.Services.WebServiceBinding(Name="ChronojumpServerAliveSoap", Namespace="http://localhost:8080/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public class ChronojumpServerAlive : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback PingAliveOperationCompleted;
    
    public ChronojumpServerAlive() {
        this.Url = "http://localhost:8080/chronojumpServerAlive.asmx";
    }
    
    private event PingAliveCompletedEventHandler PingAliveCompleted;
    
    /// <remarks>
///PingAlive
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/PingAlive", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string PingAlive(string str) {
        object[] results = this.Invoke("PingAlive", new object[] {
                    str});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginPingAlive(string str, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PingAlive", new object[] {
                    str}, callback, asyncState);
    }
    
    public string EndPingAlive(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void PingAliveAsync(string str) {
        this.PingAliveAsync(str, null);
    }
    
    public void PingAliveAsync(string str, object userState) {
        if ((this.PingAliveOperationCompleted == null)) {
            this.PingAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingAliveCompleted);
        }
        this.InvokeAsync("PingAlive", new object[] {
                    str}, this.PingAliveOperationCompleted, userState);
    }
    
    private void OnPingAliveCompleted(object arg) {
        if ((this.PingAliveCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PingAliveCompleted(this, new PingAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

public class PingAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PingAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void PingAliveCompletedEventHandler(object sender, PingAliveCompletedEventArgs args);
